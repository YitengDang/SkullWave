geom_line(data=data.front.in.vivo[time <= tmax], aes(x=time, y=interface_height, linetype='in vivo') )+
geom_line(data=data.live.interface[time <= tmax], aes(x=time, y=interface_height, color=factor(data_set) ))
#ggsave( paste0(save.folder, 'plot_fronts_exp_vs_sim_', save.id, '.pdf') )
data.front.sim.2 <- data.front.sim[time %in% c(0, tmax)]
data.front.in.vivo <- as.data.table( list(time=c(0, tmax), interface_height=c(0, tmax*V.front.exp.invivo)) )
#data.live.interface
ggplot()+
geom_line(data=data.front.in.vivo[time <= tmax], aes(x=time, y=interface_height, linetype='in vivo') )+
geom_line(data=data.front.sim[time <= tmax], aes(x=time, y=interface_height, linetype='sim')  )+
#geom_line(data=data.front.sim.2[time <= tmax], aes(x=time, y=interface_height, linetype='sim')  )+
geom_line(data=data.live.interface[time <= tmax], aes(x=time, y=interface_height, color=factor(data_set) ))
#ggsave( paste0(save.folder, 'plot_fronts_exp_vs_sim_', save.id, '.pdf') )
data.front.sim.2 <- data.front.sim[time %in% c(0, tmax)]
data.front.in.vivo <- as.data.table( list(time=c(0, tmax), interface_height=c(0, tmax*V.front.exp.invivo)) )
#data.live.interface
ggplot()
geom_line(data=data.front.in.vivo[time <= tmax], aes(x=time, y=interface_height, linetype='in vivo') )+
geom_line(data=data.front.sim[time <= tmax], aes(x=time, y=interface_height, linetype='sim')  )+
#geom_line(data=data.front.sim.2[time <= tmax], aes(x=time, y=interface_height, linetype='sim')  )+
geom_line(data=data.live.interface[time <= tmax], aes(x=time, y=interface_height, color=factor(data_set) ))
data.front.sim.2 <- data.front.sim[time %in% c(0, tmax)]
data.front.in.vivo <- as.data.table( list(time=c(0, tmax), interface_height=c(0, tmax*V.front.exp.invivo)) )
#data.live.interface
ggplot()
geom_line(data=data.front.in.vivo[time <= tmax], aes(x=time, y=interface_height, linetype='in vivo') )+
geom_line(data=data.front.sim[time <= tmax], aes(x=time, y=interface_height, linetype='sim')  )+
#geom_line(data=data.front.sim.2[time <= tmax], aes(x=time, y=interface_height, linetype='sim')  )+
geom_line(data=data.live.interface[time <= tmax], aes(x=time, y=interface_height, color=factor(data_set) ))
data.front.sim.2 <- data.front.sim[time %in% c(0, tmax)]
data.front.in.vivo <- as.data.table( list(time=c(0, tmax), interface_height=c(0, tmax*V.front.exp.invivo)) )
#data.live.interface
ggplot()+
geom_line(data=data.front.in.vivo[time <= tmax], aes(x=time, y=interface_height, linetype='in vivo') )+
geom_line(data=data.front.sim[time <= tmax], aes(x=time, y=interface_height, linetype='sim')  )+
#geom_line(data=data.front.sim.2[time <= tmax], aes(x=time, y=interface_height, linetype='sim')  )+
geom_line(data=data.live.interface[time <= tmax], aes(x=time, y=interface_height, color=factor(data_set) ))
#ggsave( paste0(save.folder, 'plot_fronts_exp_vs_sim_', save.id, '.pdf') )
tmax <- 6
ggplot(data.single.cells.merged[time <= tmax], aes(x=time, y=x_avg, color=location, linetype=source) )+
geom_line()+
geom_ribbon( aes(ymin=x_avg-x_sem, ymax=x_avg+x_sem, fill=location, alpha=0.01) )
# ggsave( paste0(save.folder, 'plot_cells_exp_vs_sim_', save.id, '.pdf') )
# dotted lines: simulations
# dashed ribbons: ex vivo tracked cells mean + SEM (avg over experiments)
# plot velocities - bar graph
# simulated front
data.phi <- as.data.table(data.phi)
tmp <- data.phi[phi < 0.5, .(X.min = min(X)), by=.(Time) ]
V.front.sim <- (tmp[Time==max(Time)]$X.min - tmp[Time==min(Time)]$X.min)*dX/T.max
# simulated cells (at the front)
# V.cells.sim <- max(as.data.table(data.V)[Time==nT+1]$V) (easy velocity)
V.cells.sim <- (data.xCells.merged[x0==0 & time==T.max]$x)/T.max
# exp cells
V.cells.exp <- velocities.mean2[Location=='Bone Front']$V.mean.mean
t1 <- 13.5
t2 <- 14.0
# exp front (ex vivo)
tmax <- 6
V.front.exp.exvivo <- mean( (data.live.interface[time==tmax]$interface_height)/tmax )
# exp front (in vivo)
V.front.exp.invivo <- (mean(data.skull.expansion[time==t2]$lin.size.um) - mean(data.skull.expansion[time==t1]$lin.size.um) )/((t2-t1)*24)
#pdf(file="velocities_barplot_sim10.pdf")
barplot( c(V.front.sim, V.front.exp.invivo, V.front.exp.exvivo, V.cells.sim, V.cells.exp ),
names.arg = c("Front (sim)", "Front in vivo", "Front ex vivo", "Cells (sim)", "Cells (ex vivo)"),
ylab = "microns/hr")
#dev.off()
# Plot result
# tmax <- 8
ggplot(data=data.merged.filt, aes(x=time, y=x_avg, linetype=source, color=location)  )+
geom_ribbon( aes(ymin=x_avg-x_sem, ymax=x_avg+x_sem, fill=location, color=NA, alpha=0.01) )+
geom_line( lwd=1 )+
labs(x="Time (hr)", y="Displacement (microns)")+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )+
scale_color_brewer(palette = "Dark2", aesthetics = c("colour", "fill"))+
xlim(0, tmax)
#ggsave( paste0(save.folder, 'plot_all_exp_vs_sim_', save.id, '.pdf') )
# Plot cell velocities
tmp.plot <- data.merged[Time==1,]
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean) )+
geom_errorbar(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, ymin = V.mean.mean-V.mean.sd, ymax = V.mean.mean+V.mean.sd)) +
geom_errorbarh(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, xmin = X0.mean.mean-X0.mean.sd, xmax = X0.mean.mean+X0.mean.sd))+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )
#ggsave( paste0(save.folder, 'cell_velocities_profile_', save.id, '.pdf'), width=8, height=6  )
# Plot result
ggplot(data=data.merged.filt, aes(x=time, y=x_avg, linetype=source, color=location)  )+
geom_ribbon( aes(ymin=x_avg-x_sem, ymax=x_avg+x_sem, fill=location, color=NA, alpha=0.01) )+
geom_line( lwd=1 )+
labs(x="Time (hr)", y="Displacement (microns)")+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )+
scale_color_brewer(palette = "Dark2", aesthetics = c("colour", "fill"))+
xlim(0, tmax)
#ggsave( paste0(save.folder, 'plot_all_exp_vs_sim_', save.id, '.pdf') )
# Plot result
ggplot(data=data.merged.filt, aes(x=time, y=x_avg, linetype=source, color=location)  )+
geom_ribbon( aes(ymin=x_avg-x_sem, ymax=x_avg+x_sem, fill=location, color=NA, alpha=0.01) )+
geom_line( lwd=1 )+
labs(x="Time (hr)", y="Displacement (microns)")+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )+
scale_color_brewer(palette = "Dark2", aesthetics = c("colour", "fill"))+
xlim(0, tmax)+
ylim(0, 120)
#ggsave( paste0(save.folder, 'plot_all_exp_vs_sim_', save.id, '.pdf') )
# Plot only experimental data
ggplot(velocities, aes(x=X0_new, y=Velocity, color=Location) )+
facet_wrap(~Video)+
geom_point()
ggplot( data=velocities.mean, aes(x=X0.mean, y=V.mean, ymin=V.mean-V.sd, ymax=V.mean+V.sd, color=Location) )+
facet_wrap(~Video)+
geom_crossbar()
#+#geom_point(data=velocities, aes(x=X0_new, y=Velocity) )
# Plot together with simulations
# With all data points
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities, aes(x=X0_new, y=Velocity, shape=factor(Video)) )+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"))+
theme_bw()
# Plot only experimental data
ggplot(velocities, aes(x=X0_new, y=Velocity, color=Location) )+
facet_wrap(~Video)+
geom_point()
ggplot( data=velocities.mean, aes(x=X0.mean, y=V.mean, ymin=V.mean-V.sd, ymax=V.mean+V.sd, color=Location) )+
facet_wrap(~Video)+
geom_crossbar()
#+#geom_point(data=velocities, aes(x=X0_new, y=Velocity) )
# Plot together with simulations
# With all data points
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities, aes(x=X0_new, y=Velocity, shape=factor(Video)) )+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"))+
theme_bw()
# Error bar plot
tmp.plot <- data.merged[Time %in% c(1) & X.micron>-L.plot & X.micron<L.plot,]
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean) )+
geom_errorbar(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, ymin = V.mean.mean-V.mean.sd, ymax = V.mean.mean+V.mean.sd)) +
geom_errorbarh(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, xmin = X0.mean.mean-X0.mean.sd, xmax = X0.mean.mean+X0.mean.sd))+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )
#ggsave( paste0(save.folder, 'cell_velocities_profile_sim8.pdf'), width=8, height=6  )
# Plot result
ggplot(data=data.merged.filt, aes(x=time, y=x_avg, linetype=source, color=location)  )+
geom_ribbon( aes(ymin=x_avg-x_sem, ymax=x_avg+x_sem, fill=location, color=NA, alpha=0.01) )+
geom_line( lwd=1 )+
labs(x="Time (hr)", y="Displacement (microns)")+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )+
scale_color_brewer(palette = "Dark2", aesthetics = c("colour", "fill"))+
xlim(0, tmax)+
ylim(0, 120)
#ggsave( paste0(save.folder, 'plot_all_exp_vs_sim_', save.id, '.pdf') )
# Plot together with simulations
# With all data points
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities, aes(x=X0_new, y=Velocity, shape=factor(Video)) )+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"))+
theme_bw()
# Error bar plot
tmp.plot <- data.merged[Time %in% c(1) & X.micron>-L.plot & X.micron<L.plot,]
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean) )+
geom_errorbar(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, ymin = V.mean.mean-V.mean.sd, ymax = V.mean.mean+V.mean.sd)) +
geom_errorbarh(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, xmin = X0.mean.mean-X0.mean.sd, xmax = X0.mean.mean+X0.mean.sd))+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )
#ggsave( paste0(save.folder, 'cell_velocities_profile.pdf'), width=8, height=6  )
## Plot profile of phi over multiple times
L.plot <- 1000
t.plot <- c(1, 51, 101)
tmp.plot <- data.merged[Time %in% t.plot & X.micron>-L.plot & X.micron<L.plot,]
ggplot(data=tmp.plot, aes(x=X.micron, y=phi, color=factor(Time)) )+
geom_line()+
labs(x=expression("Distance ("*mu*"m)"), y=expression(phi))+
xlim(-L.plot, L.plot)+
ylim(0, 1)+
theme_bw()+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16,face="bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
#ggsave(filename=paste0(save.folder, paste0("plot_phi_T1_1_51_101.pdf")), width=8, height=3)
# Plot together with simulations
# With all data points
t.plot <- 1
tmp.plot <- data.merged[Time %in% t.plot & X.micron>-L.plot & X.micron<L.plot,]
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities, aes(x=X0_new, y=Velocity, shape=factor(Video)) )+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"))+
theme_bw()
# Error bar plot
tmp.plot <- data.merged[Time %in% t.plot & X.micron>-L.plot & X.micron<L.plot,]
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean) )+
geom_errorbar(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, ymin = V.mean.mean-V.mean.sd, ymax = V.mean.mean+V.mean.sd)) +
geom_errorbarh(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, xmin = X0.mean.mean-X0.mean.sd, xmax = X0.mean.mean+X0.mean.sd))+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )
#ggsave( paste0(save.folder, 'cell_velocities_profile.pdf'), width=8, height=6  )
knitr::opts_chunk$set(echo = TRUE)
R.session()
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(data.table)
library(magrittr)
import.folder <- "./Model_results/"
save.id <- "best_model"
#import.folder <- "./data/sim6/"
import.file.params <- paste0(import.folder,save.id,"_data_parameters.csv")
import.file.rho <- paste0(import.folder,save.id,"_data_rho_1.csv")
import.file.phi <- paste0(import.folder,save.id,"_data_phi_1.csv")
import.file.V <- paste0(import.folder,save.id,"_data_V_1.csv")
#data.rho <- read.table(import.file, sep="\t", header = TRUE)
data.params <- read.csv(import.file.params, header=FALSE)
data.params
data.rho.0 <- read.csv(import.file.rho, header=FALSE)
data.phi.0 <- read.csv(import.file.phi, header=FALSE)
data.V.0 <- read.csv(import.file.V, header=FALSE)
# Import "single-cell" data from simulations (for velocity)
data.xCells1 <- as.data.table( read.csv( paste0(import.folder,save.id,"_1cell/1cell_sim1_xCellAll.csv"), header=FALSE) ) %>% setNames(., "x.raw")
data.xCells2 <- as.data.table( read.csv( paste0(import.folder,save.id,"_1cell/1cell_sim2_xCellAll.csv"), header=FALSE) ) %>% setNames(., "x.raw")
data.xCells3 <- as.data.table( read.csv( paste0(import.folder,save.id,"_1cell/1cell_sim3_xCellAll.csv"), header=FALSE) ) %>% setNames(., "x.raw")
# Read off from data.params (!!)
T.max <- 8
L <- 1500
nT <- 100
nX <- 200
dX <- 2*L/nX
dT <- T.max/nT
# saving figures
save.folder <- "./Figures/"
# Merge simulation data
data.rho.0 <- as.matrix(data.rho.0)
data.rho <- as.data.frame.table(data.rho.0)
data.rho[1:2] <- lapply(data.rho[1:2], as.numeric)
data.rho<-setNames(data.rho, c("X", "Time", "rho") )
data.phi.0 <- as.matrix(data.phi.0)
data.phi <- as.data.frame.table(data.phi.0)
data.phi[1:2] <- lapply(data.phi[1:2], as.numeric)
data.phi<-setNames(data.phi, c("X", "Time", "phi") )
data.V.0 <- as.matrix(data.V.0)
data.V <- as.data.frame.table(data.V.0)
data.V[1:2] <- lapply(data.V[1:2], as.numeric)
data.V<-setNames(data.V, c("X", "Time", "V") )
data.merged <- as.data.table( merge(merge(data.rho, data.phi), data.V ) )
# convert X to physical units
data.merged[ , X.micron := -L+(2*L)*(X-1)/(nX) ]
# Merge simulated single cell track data
# initial position
data.xCells1$x0 = 0;
data.xCells2$x0 = -200;
data.xCells3$x0 = -400;
data.xCells1[, x0 := 0] %>% .[, location := 'Bone Front']
data.xCells2[, x0 := -200] %>% .[, location := 'In Bone']
data.xCells3[, x0 := -400] %>% .[, location := 'Further In Bone']
# correct positions w.r.t. x0 (only run once!)
data.xCells1$x = data.xCells1$x.raw - data.xCells1$x0
data.xCells2$x = data.xCells2$x.raw - data.xCells2$x0
data.xCells3$x = data.xCells3$x.raw - data.xCells3$x0
# time
data.xCells1$time = (1:nrow(data.xCells1) - 1)*dT
data.xCells2$time = (1:nrow(data.xCells2) - 1)*dT
data.xCells3$time = (1:nrow(data.xCells3) - 1)*dT
data.xCells.merged <- rbindlist( list(data.xCells1, data.xCells2, data.xCells3) )
data.xCells.merged
# Skull expansion data (in vivo)
data.skull.expansion <- fread('./Data/data_skull_expansion_series.csv')
data.skull.expansion[, lin.size.um := sqrt(area)*1000 ]
ggplot( data.skull.expansion, aes(x=time, y=lin.size.um) )+
geom_point()
# Ex vivo image data
filename <- "./Data/data_ex_vivo_videos_1_to_4_all_interfaces.csv"
data.live.interface <- fread(filename, drop='V1')
#data.live.interface$data_set <- as.factor(data.live.interface$data_set)
# cell tracks
filename <- "./Data/data_ex_vivo_tracked_cells_all.csv"
data.live.cells <- fread(filename, drop='V1')
#data.live.cells$data_set <- as.factor(data.live.cells$data_set)
ggplot(data=data.live.interface[time <= 6], aes(x=time, y=interface_height, color=factor(data_set)))+
geom_line()+
ggtitle('interface')
ggplot(data=data.live.cells, aes(x=time, y=mean_displacement, color=factor(data_set), linetype=location ) )+
geom_line()+
ggtitle('ex vivo tracked cells')
# Load and analyze tracked cell *velocities* (ex vivo)
velocities_file <- "./Data/Velocities_all_videos.csv"
velocities <- fread(velocities_file, drop='V1')
velocities[, X.origin := mean(.SD[Location=='Bone Front']$X0), by=.(Video) ]
velocities[, X0_new := X0 - X.origin, by=.(Video, Location)]
# velocities[Location=='Bone Front', mean(X0_new), by=.(Video)]
velocities.mean <- velocities[, .(X0.mean=mean(X0_new), V.mean=mean(Velocity), V.sd=sd(Velocity), n=.N), by=.(Video, Location) ]
velocities.mean2 <- velocities[, .(X0.mean.mean=mean(X0_new), V.mean.mean = mean(Velocity),
X0.mean.sd=sd(X0_new), V.mean.sd=sd(Velocity)), by=.(Location) ]
# Plot experimental cell velocities
ggplot(velocities, aes(x=X0_new, y=Velocity, color=Location) )+
facet_wrap(~Video)+
geom_point()
## simulated front
T.front.sim <- 0
T.all <- (seq(0:nT)-1)/nT*T.max
tmp <- as.data.table(data.phi) %>% .[phi < 0.5, .(X.min = min(X)), by=.(Time) ]
X.front.sim <- tmp$X.min*dX
X.front.sim <- X.front.sim - X.front.sim[1]
data.front.sim <- as.data.table( list(time=T.all, interface_height=X.front.sim) )
# simulated data shows step-like progression. Fit a linear function through simulation data.
# table(data.front.sim$interface_height)
model <- lm(interface_height ~ 0 + time, data=data.front.sim)
data.front.sim.2 <- data.table( time=c(0, T.max), interface_height=c(0,  0+model$coefficients[[1]]*T.max) )
## in vivo skull expansion front (estimate)
t1=13.5
t2=14.0
tmax <- 6
V.front.exp.invivo <- (mean(data.skull.expansion[time==t2]$lin.size.um) - mean(data.skull.expansion[time==t1]$lin.size.um) )/((t2-t1)*24)
data.front.in.vivo <- as.data.table( list(time=c(0, tmax), interface_height=c(0, tmax*V.front.exp.invivo)) )
## cell tracks
filename <- "./Data/data_ex_vivo_tracked_cells_all.csv"
data.live.cells <- fread(filename, drop='V1')
data.live.cells %>% setnames(., old=c("mean_displacement"), new=c("x"))
data.single.cells.merged <- rbindlist( list(ex.vivo=data.live.cells, simulated=data.xCells.merged), fill=TRUE, idcol="source")
data.single.cells.merged[, x_avg := mean(x), by=.(time, source, location)] %>%
.[, x_sem := sd(x)/sqrt(.N), by=.(time, source, location)]
data.live.cells.filt <- data.live.cells[, c('time', 'x', 'data_set')]
#data.live.cells.filt <- data.live.cells[, c('time', 'mean_displacement', 'data_set')] %>% setnames(., c('time', 'x', 'data_set') )
data.xCells.merged.filt <- data.xCells.merged[location=='Bone Front', c('time', 'x')]
data.front.sim.2.filt <- data.front.sim.2[, c('time', 'interface_height')] %>% setnames(., c('time', 'x') )
data.front.in.vivo.filt <- data.front.in.vivo[, c('time', 'interface_height')] %>% setnames(., c('time', 'x') )
data.live.interface.filt <- data.live.interface[, c('time', 'interface_height', 'data_set')] %>% setnames(., c('time', 'x', 'data_set') )
data.merged.filt <- rbindlist( list(cells.ex.vivo=data.live.cells.filt,
cells.sim=data.xCells.merged.filt,
front.sim=data.front.sim.2.filt,
front.in.vivo=data.front.in.vivo.filt,
front.ex.vivo=data.live.interface.filt), fill=TRUE, idcol="id" )
data.merged.filt[, location := ifelse(id %in% c("cells.ex.vivo", "cells.sim"), "cells", "front") ]
data.merged.filt[, source := ifelse(id=='front.in.vivo',
'in vivo',
ifelse(id %in% c("cells.ex.vivo", "front.ex.vivo"), "ex vivo", "sim")
)]
data.merged.filt[, x_avg := mean(x), by=.(time, id) ]
data.merged.filt[, x_sem := sd(x)/sqrt(.N), by=.(time, id) ]
data.merged.filt
## Plot profile of phi over multiple times
L.plot <- 1000
t.plot <- c(1, 51, 101)
tmp.plot <- data.merged[Time %in% t.plot & X.micron>-L.plot & X.micron<L.plot,]
ggplot(data=tmp.plot, aes(x=X.micron, y=phi, color=factor(Time)) )+
geom_line()+
labs(x=expression("Distance ("*mu*"m)"), y=expression(phi))+
xlim(-L.plot, L.plot)+
ylim(0, 1)+
theme_bw()+
theme(axis.text=element_text(size=16, colour="black"),
axis.title=element_text(size=16,face="bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank() )
#ggsave(filename=paste0(save.folder, paste0(save.id, "_plot_phi_T1_1_51_101.pdf")), width=8, height=3)
knitr::opts_chunk$set(echo = TRUE)
# filename <- "/Users/dang/Documents/Projects/Tabler_skull/Data_skull_expansion/Analysed_data/Skull_expansion_2_annotated_other.csv"
filename <- "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Data/Skull expansion data/Skull_expansion_2_annotated_other.csv"
data <- fread(filename, dec = ",")
# data <- fread("sed 's/\\0//g' /Users/dang/Documents/Projects/Tabler_skull/Model_parameters/density_estimates.csv", dec = ".")
colnames(data) <- sapply(colnames(data), function(x) gsub(" ", ".", x)) # replace spaces by . in column names
data
# Distance between bones
ggplot(data=data, aes(x=time, y=Dist.bones.top, color=Condition, shape=microscope))+
geom_jitter(width=0.1, height=0)
ggplot(data=data, aes(x=time, y=Dist.bones.middle, color=Condition, shape=microscope))+
geom_jitter(width=0.1, height=0)
ggplot(data=data, aes(x=time, y=Dist.bones.bottom, color=Condition, shape=microscope))+
geom_jitter(width=0.1, height=0)
filename <- "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Data/Skull expansion data/Skull_expansion_2_annotated_other.csv"
data <- fread(filename, dec = ",")
colnames(data) <- sapply(colnames(data), function(x) gsub(" ", ".", x)) # replace spaces by . in column names
data
knitr::opts_chunk$set(echo = TRUE)
# filename <- "/Users/dang/Documents/Projects/Tabler_skull/Data_skull_expansion/Analysed_data/Skull_expansion_2_annotated_bone_sizes.csv"
filename <- "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Data/Skull expansion data/Skull_expansion_2_annotated_other.csv"
data.bone.sizes <- fread(filename, dec=',')
data.bone.sizes$Condition[data.bone.sizes$Condition=="WT"] = "Control"
ggplot(data.bone.sizes, aes(x=time, y=Area_micron2, color=Condition) )+
geom_jitter(width=0.1, height=0)
data.bone.sizes
# filename <- "/Users/dang/Documents/Projects/Tabler_skull/Data_skull_expansion/Analysed_data/Skull_expansion_2_annotated_bone_sizes.csv"
filename <- "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Data/Skull expansion data/Skull_expansion_2_annotated_bone_sizes.csv"
data.bone.sizes <- fread(filename, dec=',')
data.bone.sizes$Condition[data.bone.sizes$Condition=="WT"] = "Control"
data.bone.sizes
ggplot(data.bone.sizes, aes(x=time, y=Area_micron2, color=Condition) )+
geom_jitter(width=0.1, height=0)
data.bone.sizes[ , Area_mm2 := Area_micron2/10^6]
data.bone.sizes[ , Area_mean:=mean(Area_mm2), by=.(time, Condition)]
data.bone.sizes[ , Area_sem:=sd(Area_mm2)/sqrt(.N), by=.(time, Condition)]
# subset data
data.bone.sizes.sel <- data.bone.sizes[ data.bone.sizes$time %in% c("13.5", "14.5", "15.5") ]
# plot
save.folder.paper <- "/Users/dang/Documents/Projects/Tabler_skull/Manuscript_cell_mvt_model/figs_v4/plots/"
save.folder.plots <- "/Users/dang/Documents/Projects/Tabler_skull/Data_skull_expansion/plots/2022_07_27/"
ggplot(data.bone.sizes.sel, aes(x=time, color=Condition) )+
geom_jitter(aes(y=Area_mm2), width=0.1, height=0)+
#geom_pointrange( aes(y=Area_mean, ymin=Area_mean-Area_sem, ymax=Area_mean+Area_sem) )+
geom_crossbar( aes(y=Area_mean, ymin=Area_mean-Area_sem, ymax=Area_mean+Area_sem) )+
#geom_errorbar( aes(y=Area_mean, ymin=Area_mean-Area_sem, ymax=Area_mean+Area_sem) )+
labs(x='', y='Bone area (mm2)' )+
scale_x_continuous( breaks=c(13.5, 14.5, 15.5), labels=c("E13.5", "E14.5", "E15.5") )+
theme_bw(base_size=14)
# ggsave( paste0(save.folder.paper, "Bone_areas_by_time_condition2.pdf"), width=7, height=5)
# ggsave( paste0(save.folder.plots, "Bone_areas_by_time_condition2.pdf"), width=7, height=5)
data.bone.sizes.sel
fwrite( data.bone.sizes.sel, 'test.csv')
pwd()
pwd
ls
ls()
getwd()
# fwrite( data.bone.sizes.sel, 'test.csv')
write.csv(data.bone.sizes.sel, file = "your_filename.csv", row.names = FALSE)
# fwrite( data.bone.sizes.sel, 'test.csv')
write.csv(data.bone.sizes.sel, file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/your_filename.csv", row.names = FALSE)
tmp.plot
write.csv(tmp.plot, file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/profiles", row.names = FALSE)
write.csv(tmp.plot, file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/profiles.csv", row.names = FALSE)
tmp.plot$Time[tmp.plot$Time==1]
tmp.plot$Time[tmp.plot$Time==1] = 0
tmp.plot$Time[tmp.plot$Time==51] = 3
tmp.plot$Time[tmp.plot$Time==101] = 6
tmp.plot
# write.csv(tmp.plot, file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/profiles.csv", row.names = FALSE)
write.csv(tmp.plot, file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/profiles.csv", row.names = FALSE)
# Plot together with simulations
# With all data points
t.plot <- 1
tmp.plot <- data.merged[Time %in% t.plot & X.micron>-L.plot & X.micron<L.plot,]
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities, aes(x=X0_new, y=Velocity, shape=factor(Video)) )+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme(axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold"))+
theme_bw()
# Error bar plot
t.plot <- 1
tmp.plot <- data.merged[Time %in% t.plot & X.micron>-L.plot & X.micron<L.plot,]
ggplot(data=tmp.plot[X.micron>-1000 & X.micron<1000], aes(x=X.micron, y=V) )+
geom_line()+
geom_point(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean) )+
geom_errorbar(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, ymin = V.mean.mean-V.mean.sd, ymax = V.mean.mean+V.mean.sd)) +
geom_errorbarh(data=velocities.mean2, aes(x=X0.mean.mean, y=V.mean.mean, xmin = X0.mean.mean-X0.mean.sd, xmax = X0.mean.mean+X0.mean.sd))+
labs(x=expression("Distance ("*mu*"m)"), y=expression(V))+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )
#ggsave( paste0(save.folder, save.id, '_cell_velocities_profile.pdf'), width=8, height=6  )
tmp.plot[X.micron>-1000 & X.micron<1000]
velocities.mean2
write.csv(velocities.mean2, file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/temp.csv", row.names = FALSE)
# write.csv(velocities.mean2, file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/temp.csv", row.names = FALSE)
write.csv(tmp.plot[X.micron>-1000 & X.micron<1000], file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/temp.csv", row.names = FALSE)
# Plot result
ggplot(data=data.merged.filt, aes(x=time, y=x_avg, linetype=source, color=location)  )+
geom_ribbon( aes(ymin=x_avg-x_sem, ymax=x_avg+x_sem, fill=location, color=NA, alpha=0.01) )+
geom_line( lwd=1 )+
labs(x="Time (hr)", y="Displacement (microns)")+
theme_bw()+
theme(aspect.ratio=3/4,
axis.text=element_text(size=16),
axis.title=element_text(size=16,face="bold") )+
scale_color_brewer(palette = "Dark2", aesthetics = c("colour", "fill"))+
xlim(0, tmax)+
ylim(0, 120)
#ggsave( paste0(save.folder, save.id, '_plot_all_exp_vs_sim', '.pdf') )
data.merged.filt
write.csv(data.merged.filt, file = "/Users/ydang3/Documents/Projects_Dresden/Tabler_SkullWave/SkullWave/Code/For_publication/temp.csv", row.names = FALSE)
